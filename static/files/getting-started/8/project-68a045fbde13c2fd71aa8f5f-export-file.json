{"version":0,"snapshotData":{"virtualGoods":[{"_id":"68a184806c20923bcca5e48e","name":"score","description":"player score","startValue":20,"updatedAt":"2025-08-17T07:28:00.909Z","createdAt":"2025-08-17T07:28:00.909Z"}],"dataSchemas":[{"_id":"68a16bb46c20923bcca5d328","updatedAt":"2025-08-17T05:42:12.535Z","createdAt":"2025-08-17T05:42:12.535Z","requires":[],"name":"playerAssets","description":"store player asset","extends":"","definitions":{"playerId":{"type":"ObjectId","unique":true},"status":{"type":"String"},"coin":{"type":"Number","default":99}},"indexes":[]},{"_id":"68a5a8a26c20923bcca814a6","requires":[],"name":"playerAsset3","description":"","extends":"","definitions":{"playerId":{"type":"ObjectId","unique":true},"status":{"type":"String"},"coin":{"type":"Number","default":99}},"options":{},"inheritOptions":{},"indexes":[],"createdAt":"2025-08-20T10:51:14.776Z","updatedAt":"2025-08-20T10:51:22.351Z"},{"_id":"68aa762c6c20923bccaac0c1","requires":[],"name":"contact","description":"","extends":"","definitions":{"email":{"type":"objectId"},"phoneNumber":{"type":"number"}},"options":{"_id":false},"inheritOptions":{},"indexes":[],"createdAt":"2025-08-24T02:17:16.827Z","updatedAt":"2025-08-24T02:17:35.968Z"},{"_id":"68aa76a56c20923bccaac11e","requires":["68aa762c6c20923bccaac0c1"],"name":"player","description":"","extends":"","definitions":{"playerId":{"type":"objectId","unique":true},"zone":{"type":"string"},"health":{"type":"number","default":50},"mana":{"type":"number","default":50},"contact":{"type":"contact"},"contactArray":{"type":["contact"]}},"options":{"timestamps":{"createdAt":true,"updatedAt":false}},"inheritOptions":{},"indexes":[{"fields":{"zone":1,"contact":{"email":1}}}],"createdAt":"2025-08-24T02:19:17.411Z","updatedAt":"2025-08-24T03:44:04.510Z"},{"_id":"68aa898b6c20923bccaacbfc","requires":["68aa76a56c20923bccaac11e"],"name":"playerUpper","description":"","extends":"player","definitions":{"playerUpperId":{"type":"objectId","unique":true},"upperType":{"type":"string"},"upperNumber":{"type":"number"},"createdAt2":{"type":"Date","default":"Date.now"}},"options":{},"inheritOptions":{"overrideIndexes":true},"indexes":[],"createdAt":"2025-08-24T03:39:55.131Z","updatedAt":"2025-08-24T03:48:00.346Z"}]},"files":[{"pathname":"/PREVIEW/endpoints/MyEndpoint/.meta","content":"{\"description\":\"MyEndpoint for test\"}"},{"pathname":"/PREVIEW/endpoints/MyEndpoint/main.ts","content":"import { Request, Response } from \"gamedrive\";\n\nexport default async function (request: Request, response: Response) {\n  try {\n    const playerId = request.playerId\n    console.log(\"playerId:\", playerId)\n    response.send(\"hello from an endpoint\")\n  } catch (error) {\n    response.sendError(error);\n  }\n}"},{"pathname":"/PREVIEW/endpoints/MyEndpoint/parameters.json","content":"[{\"name\":\"action\",\"type\":\"number\"},{\"name\":\"message\",\"type\":\"string\"}]"},{"pathname":"/PREVIEW/endpoints/createOrUpdatePlayerAssets/.meta","content":"{\"description\":\"for create player asset\"}"},{"pathname":"/PREVIEW/endpoints/createOrUpdatePlayerAssets/main.ts","content":"import { Request, Response, customData } from \"gamedrive\";\n\nexport default async function (request: Request, response: Response) {\n  try {\n    const playerId = request.playerId;\n    const status = request.args.status;\n    const coin = request.args.coin;\n    const findResult = await customData.findOne(\"playerAssets\", {\n      playerId: playerId,\n    });\n\n    if (!findResult) {\n      const createResult = await customData.create(\"playerAssets\", {\n        playerId: playerId,\n        status: status,\n        coin: coin,\n      });\n      createResult[\"created\"] = true\n      response.send(createResult);\n    } else {\n      const updateResult = await customData.updateOne(\"playerAssets\", {\n        playerId: playerId,\n\n      }, {\n        status: status,\n        coin: coin,\n      });\n\n      findResult.status = status\n      findResult.coin = coin\n      findResult[\"updated\"] = true\n      response.send(findResult);\n    }\n  } catch (error) {\n    response.sendError(error);\n  }\n}"},{"pathname":"/PREVIEW/endpoints/createOrUpdatePlayerAssets/parameters.json","content":"[{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"coin\",\"type\":\"number\"}]"},{"pathname":"/PREVIEW/endpoints/getPlayerAssets/.meta","content":"{\"description\":\"to getPlayerAssets\"}"},{"pathname":"/PREVIEW/endpoints/getPlayerAssets/main.ts","content":"import { Request, Response, customData } from \"gamedrive\"\n\nexport default async function (request: Request, response: Response) {\n  try {\n    const playerId = request.playerId\n    const playerAssetData = await customData.findOne(\"playerAssets\", {\n      playerId: playerId\n    })\n    response.send(playerAssetData)\n  } catch (error) {\n    response.sendError(error)\n  }\n}\n"},{"pathname":"/PREVIEW/endpoints/getScore/.meta","content":"{\"description\":\"getScore from virtual good\"}"},{"pathname":"/PREVIEW/endpoints/getScore/main.ts","content":"import { Request, Response, virtualGood } from \"gamedrive\"\n\nexport default async function (request: Request, response: Response) {\n  try {\n    const scoreResult = await virtualGood.getValue(\"score\", request.playerId)\n    response.send(scoreResult)\n  } catch (error) {\n    response.sendError(error)\n  }\n}\n"},{"pathname":"/PREVIEW/endpoints/getScore/parameters.json","content":"[]"},{"pathname":"/PREVIEW/endpoints/getScoreLeaderboard/.meta","content":"{\"description\":\"to get getScoreLeaderboard \"}"},{"pathname":"/PREVIEW/endpoints/getScoreLeaderboard/main.ts","content":"import { Request, Response, virtualGood, } from \"gamedrive\"\n\nexport default async function (request: Request, response: Response) {\n  try {\n    const incomingPlayerId = request.playerId\n    const limit = request.args.limit\n    const skip = request.args.skip\n\n    const virtualGoodScore = \"score\"\n    const playerRank = await virtualGood.getPlayerRank(virtualGoodScore, incomingPlayerId)\n    const topPlayers = await virtualGood.findTopRankPlayers(virtualGoodScore, limit, skip, -1)\n\n    const data = {\n      playerRank,\n      topPlayers\n    }\n\n    response.send(data)\n  } catch (error) {\n    response.sendError(error)\n  }\n}\n"},{"pathname":"/PREVIEW/endpoints/getScoreLeaderboard/parameters.json","content":"[{\"name\":\"limit\",\"type\":\"number\"},{\"name\":\"skip\",\"type\":\"number\"}]"},{"pathname":"/PREVIEW/endpoints/setScore/.meta","content":"{\"description\":\"set player score\"}"},{"pathname":"/PREVIEW/endpoints/setScore/main.ts","content":"import { Request, Response, virtualGood } from \"gamedrive\"\n\nexport default async function (request: Request, response: Response) {\n  try {\n    const playerId = request.playerId\n    const score = request.args.score\n    const result = await virtualGood.setValue(\"score\", playerId, score)\n    response.send(result)\n  } catch (error) {\n    response.sendError(error)\n  }\n}\n"},{"pathname":"/PREVIEW/endpoints/setScore/parameters.json","content":"[{\"name\":\"score\",\"type\":\"number\"}]"},{"pathname":"/PREVIEW/rooms/cool-game-room/.meta","content":"{\"description\":\"\"}"},{"pathname":"/PREVIEW/rooms/cool-game-room/chat/.empty","content":""},{"pathname":"/PREVIEW/rooms/cool-game-room/chat/BroadcastManager.ts","content":"import { Component } from 'gamedrive-engine'\nimport { Client, clientManager, onMessageEmitter, broadcast } from 'gamedrive-room'\nimport { MESSAGE_CHAT_BC } from '../message/messageTypes'\nimport { MessageObj } from './types'\n\nexport class BroadcastManager extends Component {\n\n  onEnable() {\n    onMessageEmitter.on(MESSAGE_CHAT_BC, this.receiveMessage, this)\n  }\n\n  onDisable() {\n    onMessageEmitter.off(MESSAGE_CHAT_BC, this.receiveMessage)\n  }\n\n  private receiveMessage(client: Client, message: string) {\n    this.sendBroadcase(client.userData.playerId, message)\n  }\n\n  private sendBroadcase(fromPlayerId: string, message: string) {\n\n    const messageObj: MessageObj = {\n      fromPlayerId: fromPlayerId,\n      message: message\n    }\n    broadcast(MESSAGE_CHAT_BC, messageObj)\n  }\n\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/chat/DirectMessageManager.ts","content":"import { Component } from 'gamedrive-engine'\nimport { Client, clientManager, onMessageEmitter } from 'gamedrive-room'\nimport { MESSAGE_CHAT_DM } from '../message/messageTypes';\nimport { MessageObj } from './types';\n\ntype ChatDM = {\n  toPlayerId: string,\n  message: string\n}\nexport class DirectMessageManager extends Component {\n\n  onEnable() {\n    onMessageEmitter.on(MESSAGE_CHAT_DM, this.receiveMessage, this)\n  }\n\n  onDisable() {\n    onMessageEmitter.off(MESSAGE_CHAT_DM, this.receiveMessage)\n  }\n\n  private receiveMessage(client: Client, message: ChatDM) {\n    this.sendMessageTo(client.userData.playerId, message.toPlayerId, message.message)\n  }\n\n  private sendMessageTo(fromPlayerId: string, toPlayerId: string, message: string) {\n    const client = clientManager.getClientByPlayerId(toPlayerId)\n    if (!client) {\n      return;\n    }\n    const messageObj: MessageObj = {\n      fromPlayerId: fromPlayerId,\n      message: message\n    }\n    client.send(MESSAGE_CHAT_DM, messageObj)\n  }\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/chat/loader.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { TAG_NODE_CHAT } from '../nodeTags'\nimport { BroadcastManager } from './BroadcastManager'\nimport { DirectMessageManager } from './DirectMessageManager'\n\nexport function loadChatManagers() {\n  const chatNode = new Node()\n  chatNode.tag = TAG_NODE_CHAT\n  chatNode.addComponent(DirectMessageManager)\n  chatNode.addComponent(BroadcastManager)\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/chat/types.ts","content":"export type MessageObj = {\n  fromPlayerId: string,\n  message: string\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/connection/.empty","content":""},{"pathname":"/PREVIEW/rooms/cool-game-room/connection/LeavePlayerManager.ts","content":"import { Component } from 'gamedrive-engine'\nimport { Client, onDisconnectEvent, onLeaveEvent, onReconnectEvent, rejectReconnect } from 'gamedrive-room'\n\nexport class LeavePlayerManager extends Component {\n\n  onEnable() {\n    onDisconnectEvent.addListener(this.onDisconnect, this)\n    onReconnectEvent.addListener(this.onReconnect, this)\n    onLeaveEvent.addListener(this.onLeave, this)\n  }\n\n  onDisable() {\n    onDisconnectEvent.removeListener(this.onDisconnect)\n    onReconnectEvent.removeListener(this.onReconnect)\n    onLeaveEvent.removeListener(this.onLeave)\n  }\n\n  _disconnectSessionIds: string[] = []\n  _toRejectReconnectSessionIds: string[] = []\n\n  onDisconnect(client: Client) {\n    const sessionId = client.sessionId\n\n    if (!this._disconnectSessionIds.includes(sessionId)) {\n      this._disconnectSessionIds.push(sessionId)\n    }\n\n    this.tryRejectReconnect(sessionId)\n  }\n\n  onReconnect(client: Client) {\n    this.removeDisconnectSessionId(client.sessionId)\n  }\n\n  onLeave(client: Client) {\n    this.removeToRejectessionId(client.sessionId)\n    this.removeDisconnectSessionId(client.sessionId)\n  }\n\n  private tryRejectReconnect(sessionId: string) {\n    if (this._toRejectReconnectSessionIds.includes(sessionId)) {\n      this.do_rejectConnection(sessionId)\n    }\n  }\n\n  private removeDisconnectSessionId(sessionId: string) {\n    const index = this._disconnectSessionIds.indexOf(sessionId)\n    if (index >= 0) {\n      this._disconnectSessionIds.splice(index, 1)\n    }\n  }\n\n  private removeToRejectessionId(sessionId: string) {\n    const index = this._toRejectReconnectSessionIds.indexOf(sessionId)\n    if (index >= 0) {\n      this._toRejectReconnectSessionIds.splice(index, 1)\n    }\n  }\n\n  private do_rejectConnection(sessionId: string) {\n    rejectReconnect(sessionId)\n  }\n\n  public doLeaveClient(client: Client, code: number) {\n    const sessionId = client.sessionId\n    if (this._disconnectSessionIds.includes(sessionId)) {\n      this.do_rejectConnection(sessionId)\n    } else {\n      if (!this._toRejectReconnectSessionIds.includes(sessionId)) {\n        this._toRejectReconnectSessionIds.push(sessionId)\n      }\n\n      client.leave(code)\n    }\n  }\n\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/connection/ReconnectPlayerManger.ts","content":"import { Component } from 'gamedrive-engine'\nimport { Client, onDisconnectEvent, onReconnectEvent, rejectReconnect, setAllowReconnect } from 'gamedrive-room'\n\nconst allowReconnectSeconds = 30\n\nexport class ReconnectPlayerManger extends Component {\n\n  onEnable() {\n    onDisconnectEvent.addListener(this.onDisconnect, this)\n    onReconnectEvent.addListener(this.onReconnect, this)\n  }\n\n  onDisable() {\n    onDisconnectEvent.removeListener(this.onDisconnect)\n    onReconnectEvent.removeListener(this.onReconnect)\n  }\n\n  _delayRejectReconnect: Record<string, any> = {}\n\n  awake() {\n    setAllowReconnect(true)\n  }\n  \n  private onDisconnect(client: Client) {\n\n    const delay = this.delay(() => {\n      rejectReconnect(client.sessionId)\n      delete this._delayRejectReconnect[client.sessionId]\n    }, allowReconnectSeconds)\n\n    this._delayRejectReconnect[client.sessionId] = delay\n  }\n\n  private onReconnect(client: Client) {\n\n    if (this._delayRejectReconnect[client.sessionId]) {\n      this.stopDelay(this._delayRejectReconnect[client.sessionId])\n      delete this._delayRejectReconnect[client.sessionId]\n    }\n  }\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/connection/loader.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { TAG_NODE_CONNECTION } from '../nodeTags'\nimport { LeavePlayerManager } from './LeavePlayerManager'\nimport { ReconnectPlayerManger } from './ReconnectPlayerManger'\n\nexport function loadConnectionManagers() {\n  const connectionNode = new Node()\n  connectionNode.tag = TAG_NODE_CONNECTION\n\n  connectionNode.addComponent(ReconnectPlayerManger)\n  connectionNode.addComponent(LeavePlayerManager)\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/items/.empty","content":""},{"pathname":"/PREVIEW/rooms/cool-game-room/items/ItemsManager.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { TAG_NODE_STATE } from '../nodeTags';\nimport { ItemsStateManager } from '../state/ItemsStateManager';\nimport { Item } from './entities/Item';\n\nexport class ItemsManager extends Component {\n\n  itemsStateManager: ItemsStateManager\n  awake() {\n    this.itemsStateManager = Node.findOneByTag(TAG_NODE_STATE).getComponent(ItemsStateManager)\n  }\n\n  public addItem(item: Item) {\n    //do some cool logic\n    this.itemsStateManager.addNewItem(item.id, item.name, item.level)\n  }\n\n  public removeItem(itemId: string) {\n    //do some cool logic\n    this.itemsStateManager.removeItem(itemId)\n  }\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/items/entities/.empty","content":""},{"pathname":"/PREVIEW/rooms/cool-game-room/items/entities/Item.ts","content":"import { ItemSchema } from \"../../state/entities/ItemSchema\";\n\nexport interface Item extends ItemSchema {\n  id: string\n}\n"},{"pathname":"/PREVIEW/rooms/cool-game-room/items/loader.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { TAG_NODE_ITEMS } from '../nodeTags'\nimport { ItemsManager } from './ItemsManager'\n\n\n\nexport function loadItemsManagers() {\n  const itemsNode = new Node()\n  itemsNode.tag = TAG_NODE_ITEMS\n  itemsNode.addComponent(ItemsManager)\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/main.ts","content":"import { loadChatManagers } from './chat/loader';\nimport { loadConnectionManagers } from './connection/loader';\nimport { loadItemsManagers } from './items/loader';\nimport { loadMessageManagers } from './message/loader';\nimport { loadPlayersManagers } from './players/loader';\nimport { loadStateManagers } from './state/loader';\n\nexport default function () {\n  //all nodes created inside this function will have the root node as parent\n  // const newNode = new Node()\n  loadConnectionManagers()\n  loadStateManagers();\n  loadMessageManagers();\n  loadPlayersManagers();\n  loadItemsManagers();\n  loadChatManagers()\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/message/.empty","content":""},{"pathname":"/PREVIEW/rooms/cool-game-room/message/AddOrRemoveItemMessageManager.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { Client, onMessageEmitter } from 'gamedrive-room'\nimport { Item } from '../items/entities/Item'\nimport { ItemsManager } from '../items/ItemsManager'\nimport { TAG_NODE_ITEMS } from '../nodeTags'\nimport { MESSAGE_TYPE_ADD_ITEM, MESSAGE_TYPE_REMOVE_ITEM } from './messageTypes'\n\nexport class AddOrRemoveItemMessageManager extends Component {\n\n  itemManager: ItemsManager\n  awake() {\n    this.itemManager = Node.findOneByTag(TAG_NODE_ITEMS).getComponent(ItemsManager)\n  }\n  onEnable() {\n    onMessageEmitter.on(MESSAGE_TYPE_ADD_ITEM, this.receiveAddItemMessage, this)\n    onMessageEmitter.on(MESSAGE_TYPE_REMOVE_ITEM, this.receiveRemoveItemMessage, this)\n  }\n\n  onDisable() {\n    onMessageEmitter.off(MESSAGE_TYPE_ADD_ITEM, this.receiveAddItemMessage)\n    onMessageEmitter.off(MESSAGE_TYPE_REMOVE_ITEM, this.receiveRemoveItemMessage)\n  }\n\n  private receiveAddItemMessage(client: Client, message: Item) {\n    const item = message\n    this.itemManager.addItem(item)\n  }\n\n  private receiveRemoveItemMessage(client: Client, message: string) {\n    const itemId = message\n    this.itemManager.removeItem(itemId)\n  }\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/message/MovePlayerMessageManager.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { Client, onMessageEmitter } from 'gamedrive-room'\nimport { TAG_NODE_PLAYERS } from '../nodeTags'\nimport { PlayerPositionManager } from '../players/PlayerPositionManager'\nimport { MESSAGE_TYPE_MOVE_PLAYER } from './messageTypes'\n\ntype Position = {\n  x: number,\n  y: number\n}\nexport class MovePlayerMessageManager extends Component {\n\n  playerPositionManager: PlayerPositionManager\n  awake() {\n    this.playerPositionManager = Node.findOneByTag(TAG_NODE_PLAYERS).getComponent(PlayerPositionManager)\n  }\n  onEnable() {\n    onMessageEmitter.on(MESSAGE_TYPE_MOVE_PLAYER, this.receiveMessage, this)\n  }\n\n  onDisable() {\n    onMessageEmitter.off(MESSAGE_TYPE_MOVE_PLAYER, this.receiveMessage)\n  }\n\n  private receiveMessage(client: Client, message: Position) {\n    const playerId = client.userData.playerId\n    const position = message\n    this.playerPositionManager.setPlayerPositions(playerId, position.x, position.y)\n  }\n\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/message/loader.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { TAG_NODE_MESSAGE } from '../nodeTags'\nimport { AddOrRemoveItemMessageManager } from './AddOrRemoveItemMessageManager'\nimport { MovePlayerMessageManager } from './MovePlayerMessageManager'\n\n\nexport function loadMessageManagers() {\n  const messageNode = new Node()\n  messageNode.tag = TAG_NODE_MESSAGE\n  messageNode.addComponent(MovePlayerMessageManager)\n  messageNode.addComponent(AddOrRemoveItemMessageManager)\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/message/messageTypes.ts","content":"\n\nexport const MESSAGE_TYPE_MOVE_PLAYER = \"MOVE_PLAYER\"\nexport const MESSAGE_TYPE_ADD_ITEM = \"ADD_ITEM\"\nexport const MESSAGE_TYPE_REMOVE_ITEM = \"REMOVE_ITEM\"\n\nexport const MESSAGE_CHAT_DM = \"CHAT_DM\"\nexport const MESSAGE_CHAT_BC = \"CHAT_BC\""},{"pathname":"/PREVIEW/rooms/cool-game-room/nodeTags.ts","content":"\nexport const TAG_NODE_CONNECTION = \"connecition\"\nexport const TAG_NODE_MESSAGE = \"message\"\nexport const TAG_NODE_STATE = \"state\"\n\nexport const TAG_NODE_PLAYERS = \"players\"\nexport const TAG_NODE_ITEMS = \"items\"\n\nexport const TAG_NODE_CHAT = \"chat\""},{"pathname":"/PREVIEW/rooms/cool-game-room/players/.empty","content":""},{"pathname":"/PREVIEW/rooms/cool-game-room/players/PlayerPositionManager.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { TAG_NODE_STATE } from '../nodeTags'\nimport { PlayersStateManager } from '../state/PlayersStateManager'\n\nexport class PlayerPositionManager extends Component {\n\n  playersStateManager: PlayersStateManager\n  awake() {\n    this.playersStateManager = Node.findOneByTag(TAG_NODE_STATE).getComponent(PlayersStateManager)\n  }\n\n  public setPlayerPositions(playerId: string, x: number, y: number) {\n    //we can do some cool login here before set state\n    this.playersStateManager.setPlayerPositions(playerId, x, y)\n  }\n\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/players/PlayersManager.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { Client, onJoinEvent, onLeaveEvent, onDisconnectEvent, onReconnectEvent } from 'gamedrive-room'\nimport { TAG_NODE_STATE } from '../nodeTags'\nimport { PlayersStateManager } from '../state/PlayersStateManager'\n\nexport class PlayersManager extends Component {\n\n  playersStateManager: PlayersStateManager\n  awake() {\n    this.playersStateManager = Node.findOneByTag(TAG_NODE_STATE).getComponent(PlayersStateManager)\n  }\n\n  onEnable() {\n    onJoinEvent.addListener(this.onJoinListener, this)\n    onLeaveEvent.addListener(this.onLeaveListener, this)\n    onDisconnectEvent.addListener(this.onDisconnect, this)\n    onReconnectEvent.addListener(this.onReconnect, this)\n  }\n\n  onDisable() {\n    onJoinEvent.removeListener(this.onJoinListener)\n    onLeaveEvent.removeListener(this.onLeaveListener)\n    onDisconnectEvent.removeListener(this.onDisconnect)\n    onReconnectEvent.removeListener(this.onReconnect)\n  }\n\n  onJoinListener(client: Client, options: any) {\n    const playerId = client.userData.playerId\n    const player = this.playersStateManager.getPlayerById(playerId)\n    if (!player) {\n      this.playersStateManager.addNewPlayer(playerId, 0, 0, true)\n    } else {\n      console.error(\"player already exist\")\n    }\n  }\n\n  onLeaveListener(client: Client) {\n    const playerId = client.userData.playerId\n    this.playersStateManager.removePlayer(playerId)\n  }\n\n  onDisconnect(client: Client) {\n    const playerId = client.userData.playerId\n    this.playersStateManager.setPlayerConnection(playerId, false)\n  }\n\n  onReconnect(client: Client) {\n    const playerId = client.userData.playerId\n    this.playersStateManager.setPlayerConnection(playerId, true)\n  }\n}\n\n"},{"pathname":"/PREVIEW/rooms/cool-game-room/players/entities/.empty","content":""},{"pathname":"/PREVIEW/rooms/cool-game-room/players/entities/Player.ts","content":"import { PlayerSchema } from \"../../state/entities/PlayerSchema\";\n\nexport interface Player extends PlayerSchema {\n}\n"},{"pathname":"/PREVIEW/rooms/cool-game-room/players/loader.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { TAG_NODE_PLAYERS } from '../nodeTags'\nimport { PlayerPositionManager } from './PlayerPositionManager'\nimport { PlayersManager } from './PlayersManager'\n\nexport function loadPlayersManagers() {\n  const playersNode = new Node()\n  playersNode.tag = TAG_NODE_PLAYERS\n  playersNode.addComponent(PlayersManager)\n  playersNode.addComponent(PlayerPositionManager)\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/schemas/AUTO_GEN/csharp/Item.cs","content":"// \n// THIS FILE HAS BEEN GENERATED AUTOMATICALLY\n// DO NOT CHANGE IT MANUALLY UNLESS YOU KNOW WHAT YOU'RE DOING\n// \n// GENERATED USING @colyseus/schema 1.0.40\n// \n\nusing Colyseus.Schema;\n\nnamespace GameDriveSample {\n\tpublic partial class Item : Schema {\n\t\t[Type(0, \"string\")]\n\t\tpublic string name = default(string);\n\n\t\t[Type(1, \"uint8\")]\n\t\tpublic byte level = default(byte);\n\t}\n}\n"},{"pathname":"/PREVIEW/rooms/cool-game-room/schemas/AUTO_GEN/csharp/MainState.cs","content":"// \n// THIS FILE HAS BEEN GENERATED AUTOMATICALLY\n// DO NOT CHANGE IT MANUALLY UNLESS YOU KNOW WHAT YOU'RE DOING\n// \n// GENERATED USING @colyseus/schema 1.0.40\n// \n\nusing Colyseus.Schema;\n\nnamespace GameDriveSample {\n\tpublic partial class MainState : Schema {\n\t\t[Type(0, \"float32\")]\n\t\tpublic float timer = default(float);\n\n\t\t[Type(1, \"array\", typeof(ArraySchema<Player>))]\n\t\tpublic ArraySchema<Player> players = new ArraySchema<Player>();\n\n\t\t[Type(2, \"map\", typeof(MapSchema<Item>))]\n\t\tpublic MapSchema<Item> itemMap = new MapSchema<Item>();\n\t}\n}\n"},{"pathname":"/PREVIEW/rooms/cool-game-room/schemas/AUTO_GEN/csharp/Player.cs","content":"// \n// THIS FILE HAS BEEN GENERATED AUTOMATICALLY\n// DO NOT CHANGE IT MANUALLY UNLESS YOU KNOW WHAT YOU'RE DOING\n// \n// GENERATED USING @colyseus/schema 1.0.40\n// \n\nusing Colyseus.Schema;\n\nnamespace GameDriveSample {\n\tpublic partial class Player : Schema {\n\t\t[Type(0, \"string\")]\n\t\tpublic string id = default(string);\n\n\t\t[Type(1, \"string\")]\n\t\tpublic string name = default(string);\n\n\t\t[Type(2, \"int8\")]\n\t\tpublic sbyte positionX = default(sbyte);\n\n\t\t[Type(3, \"int8\")]\n\t\tpublic sbyte positionY = default(sbyte);\n\n\t\t[Type(4, \"boolean\")]\n\t\tpublic bool connected = default(bool);\n\t}\n}\n"},{"pathname":"/PREVIEW/rooms/cool-game-room/schemas/DefaultMainState.json","content":"{\n  \"name\": \"MainState\",\n  \"fields\": [\n    {\n      \"name\": \"timer\",\n      \"type\": \"float32\"\n    },\n    {\n      \"name\": \"players\",\n      \"type\": \"Player\",\n      \"collection\": \"ArraySchema\"\n    },\n    {\n      \"name\": \"itemMap\",\n      \"type\": \"Item\",\n      \"collection\": \"MapSchema\"\n    }\n  ]\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/schemas/Item.json","content":"{\r\n  \"name\": \"Item\",\r\n  \"fields\": [\r\n    {\r\n      \"name\": \"name\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"level\",\r\n      \"type\": \"uint8\"\r\n    }\r\n  ]\r\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/schemas/Player.json","content":"{\r\n  \"name\": \"Player\",\r\n  \"fields\": [\r\n    {\r\n      \"name\": \"id\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"name\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"positionX\",\r\n      \"type\": \"int8\"\r\n    },\r\n    {\r\n      \"name\": \"positionY\",\r\n      \"type\": \"int8\"\r\n    },\r\n    {\r\n      \"name\": \"connected\",\r\n      \"type\": \"boolean\",\r\n      \"default\": true\r\n    }\r\n  ]\r\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/state/.empty","content":""},{"pathname":"/PREVIEW/rooms/cool-game-room/state/ItemsStateManager.ts","content":"import { Component } from 'gamedrive-engine'\nimport { schemaManager, state } from 'gamedrive-room';\nimport { ItemSchema } from './entities/ItemSchema';\n\nexport class ItemsStateManager extends Component {\n\n  public addNewItem(itemId: string, itemName: string, level: number): ItemSchema {\n    if (!itemId) {\n      return;\n    }\n    if (state.itemMap.get(itemId)) {\n      return\n    }\n\n    const ItemSchemaClass = schemaManager.getClass('Item')\n    const newItem = new ItemSchemaClass()\n    newItem.name = itemName\n    newItem.level = level;\n    state.itemMap.set(itemId, newItem)\n    return newItem\n  }\n\n  public removeItem(itemId: string) {\n    if (!state.itemMap.get(itemId)) {\n      return\n    }\n    state.itemMap.delete(itemId);\n  }\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/state/PlayersStateManager.ts","content":"import { Component } from 'gamedrive-engine'\nimport { schemaManager, state } from 'gamedrive-room'\nimport { PlayerSchema } from './entities/PlayerSchema'\n\nexport class PlayersStateManager extends Component {\n\n  private indexOfPlayer(playerId: string): number {\n    for (let i = 0; i < state.players.length; i++) {\n      const player: PlayerSchema = state.players[i]\n      if (player.id == playerId) {\n        return i\n      }\n    }\n\n    return -1\n  }\n\n  public getPlayerById(playerId: string): PlayerSchema {\n    const index = this.indexOfPlayer(playerId)\n    if (index < 0) {\n      return null\n    }\n\n    return state.players[index]\n  }\n\n  public addNewPlayer(playerId: string, positionX: number, positionY: number, connected: boolean): PlayerSchema {\n    const PlayerSchemaClass = schemaManager.getClass('Player')\n    const newPlayer = new PlayerSchemaClass()\n    newPlayer.id = playerId\n    newPlayer.positionX = positionX;\n    newPlayer.positionY = positionY;\n    newPlayer.connected = connected;\n    state.players.push(newPlayer)\n    return newPlayer\n  }\n\n  public removePlayer(playerId: string) {\n    const index = this.indexOfPlayer(playerId)\n    if (index >= 0) {\n      state.players.splice(index, 1)\n    }\n  }\n\n  public setPlayerConnection(playerId: string, connected: boolean) {\n    const player = this.getPlayerById(playerId)\n    if (player) {\n      player.connected = connected\n    }\n  }\n\n  public setPlayerPositions(playerId: string, positionX: number, positionY: number) {\n    const player = this.getPlayerById(playerId)\n    if (player) {\n      player.positionX = positionX;\n      player.positionY = positionY;\n    } else {\n      console.error(\"player: \" + playerId + \" not found:\")\n    }\n  }\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/state/TimerStateManger.ts","content":"import { Component } from 'gamedrive-engine'\nimport { state } from 'gamedrive-room'\n\nexport class TimerStateManger extends Component {\n\n  start() {\n    state.timer = 0.0\n  }\n\n  update(deltaTime: number) {\n    state.timer += deltaTime\n  }\n}"},{"pathname":"/PREVIEW/rooms/cool-game-room/state/entities/.empty","content":""},{"pathname":"/PREVIEW/rooms/cool-game-room/state/entities/ItemSchema.ts","content":"\nexport interface ItemSchema {\n  name: string\n  level: number\n}\n\n"},{"pathname":"/PREVIEW/rooms/cool-game-room/state/entities/PlayerSchema.ts","content":"export interface PlayerSchema {\n  id: string\n  name: string\n  connected: boolean,\n  positionX: number,\n  positionY: number,\n}\n\n"},{"pathname":"/PREVIEW/rooms/cool-game-room/state/loader.ts","content":"import { Component, Node } from 'gamedrive-engine'\nimport { TAG_NODE_STATE } from '../nodeTags'\nimport { ItemsStateManager } from './ItemsStateManager'\nimport { PlayersStateManager } from './PlayersStateManager'\nimport { TimerStateManger } from './TimerStateManger'\n\n\nexport function loadStateManagers() {\n  const stateNode = new Node()\n  stateNode.tag = TAG_NODE_STATE\n\n  stateNode.addComponent(PlayersStateManager)\n  stateNode.addComponent(ItemsStateManager)\n  stateNode.addComponent(TimerStateManger)\n}"}]}